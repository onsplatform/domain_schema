# Generated by Django 2.2 on 2019-07-03 16:34

import core.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('table', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EntityMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maps', to='core.App')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maps', to='core.Entity')),
                ('reprocessable', models.BooleanField(default=False)),

            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('precision', models.IntegerField(null=True)),
                ('field_type', models.CharField(choices=[(core.models.FIELD_TYPES('char'), 'char'), (core.models.FIELD_TYPES('varchar'), 'varchar'), (core.models.FIELD_TYPES('text'), 'text'), (core.models.FIELD_TYPES('bool'), 'bool'), (core.models.FIELD_TYPES('int'), 'int'), (core.models.FIELD_TYPES('dec'), 'dec'), (core.models.FIELD_TYPES('timestamp'), 'timestamp'), (core.models.FIELD_TYPES('UUID'), 'UUID'), (core.models.FIELD_TYPES('SERIAL'), 'SERIAL')], max_length=12)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.Entity')),
            ],
        ),
        migrations.CreateModel(
            name='MapFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('expression', models.TextField()),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='core.EntityMap')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Migration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('date_executed', models.DateTimeField(null=True)),
                ('first', models.BooleanField(default=False)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='migrations', to='core.Entity')),
            ],
        ),
        migrations.CreateModel(
            name='MappedField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=50)),
                ('entity_map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.EntityMap')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='core.Field')),
            ],
        ),
        migrations.CreateModel(
            name='MapFilterParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_array', models.BooleanField(default=False)),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='core.MapFilter')),
            ],
        ),
        migrations.AddField(
            model_name='field',
            name='migration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.Migration'),
        ),
        migrations.AddField(
            model_name='entity',
            name='solution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='core.Solution'),
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='core.Solution')),
            ],
        ),
        migrations.AddField(
            model_name='app',
            name='solution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apps', to='core.Solution'),
        ),
        migrations.AddConstraint(
            model_name='mappedfield',
            constraint=models.UniqueConstraint(fields=('entity_map', 'field'), name='unique_map_field'),
        ),
        migrations.AddConstraint(
            model_name='mappedfield',
            constraint=models.UniqueConstraint(fields=('entity_map', 'alias'), name='unique_map_alias'),
        ),
        migrations.AddConstraint(
            model_name='mapfilterparameter',
            constraint=models.UniqueConstraint(fields=('filter', 'name'), name='unique_filter_parameter'),
        ),
        migrations.AddConstraint(
            model_name='mapfilter',
            constraint=models.UniqueConstraint(fields=('map', 'name'), name='unique_map_filter'),
        ),
        migrations.AddConstraint(
            model_name='field',
            constraint=models.UniqueConstraint(fields=('entity', 'name'), name='unique_entity_field'),
        ),
        migrations.AlterUniqueTogether(
            name='entitymap',
            unique_together={('app', 'name')},
        ),
        migrations.AddConstraint(
            model_name='entity',
            constraint=models.UniqueConstraint(fields=('solution', 'name'), name='unique_solution_entity'),
        ),
        migrations.AddConstraint(
            model_name='branch',
            constraint=models.UniqueConstraint(fields=('solution', 'name'), name='unique_solution_branch'),
        ),
        migrations.AddConstraint(
            model_name='app',
            constraint=models.UniqueConstraint(fields=('solution', 'name'), name='unique_solution_app'),
        ),
        migrations.RunSQL(
            'CREATE SCHEMA entities'
        ),
        migrations.RunSQL(
            'CREATE EXTENSION "uuid-ossp";'
        ),
        migrations.RunSQL(
        """
            CREATE OR REPLACE FUNCTION entities.save_history()
            RETURNS trigger
            LANGUAGE plpgsql
            AS $function$
                BEGIN
                    EXECUTE 'INSERT INTO ' || TG_RELID::regclass::text || '_history SELECT public.uuid_generate_v4() as version_id, (($2).modified - interval ''1 milliseconds'') as modified_until, ($1).*' USING old, new;
                    RETURN NEW;
                END;
            $function$
        """
        ),
    ]
